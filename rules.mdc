---
description: 
globs: 
alwaysApply: false
---
make sure all the pages are working according to following specs
Website Theme: Social Development Events Platform
In this assignment, you'll build a community-driven event management platform where users can create, join, and track social service events in their local area.
Examples:
"Road Cleaning in Mirpur 10, Dhaka”
"Tree Plantation - Hossainpur, Kishoreganj"
Ensure the Following things to get a 100% mark

Include at least 15 meaningful commits on the client side & 8 meaningful commits on the server side with descriptive messages.
Include a README file with the project name, purpose, live URL, key features, and any npm packages you have used.
Ensure the website is fully responsive on mobile, tablet, and desktop.
Secure Firebase configuration keys using environment variables.
Secure your MongoDB credentials using the environment variable.
Create a design that encourages recruiters. Color contrast should please the eye & ensure that the website has proper alignment and space. The website does not express gobindo design
Deployment Guideline
If your Deployment is not okay you will get 0 and may miss the chance of our upcoming rewards. 
Ensure that your server is working perfectly on production and not throwing any CORS / 404 / 504 Errors.  
Ensure that your Live Link is working perfectly and that it is not showing errors on Landing in your system.  
⚠️ ensure that the page doesn't throw any error on reloading from any routes.  
⚠️ Add your domain for authorization to Firebase if you use Netlify / surge
⚠️ Logged-in User must not  redirect to Login on reloading any private route 

Layout & Page Structure

 Navbar:
App Logo/Name
Upcoming Events 
Conditional Login/Logout:
If not logged in, show a Login button.
If logged in, show the user's profile picture and Logout button.
On hovering over the profile picture, show the user’s display name.
Profile Picture (Dropdown):
Create Event (Private/Protected Route)
Manage Events (Private/Protected Route)
Joined Events (Private/Protected Route)
Main Section:  Main Section will show different pages based on routes.  
Footer: A Footer with all relevant information and eye-catching design.

Authentication System
Login Page: When you click the login button on the navbar it redirects to the login page. You have to use a password and email-based authentication to log in. The login page will have-  
Email 
Password 
Google login/ GitHub-  implement any of one 
A link that will redirect to the Register page 
Register Page: You have to use a password and email-based authentication to register. The Register page will have the following - 
Name 
Email 
photoURL 
password  
A Link that will redirect to the login page 
For password verification you need to follow this -  Must have an Uppercase letter, a lowercase letter, Length must be at least 6 character 
If any of this isn’t fulfilled it will show an error message /toast
After successful login or Register you need to show toast/sweet alert

Home page(public)
Banner section - Design it based on the project theme
Feature section - showcase few features of this application
Gallery section - showcase different events photographs(static)
Newsletter section - a newsletter subscription section. You have to design this section. No functionality is required for this section. 

Create event page(private page)
will have a create event page to create an event. 
Create event Functionalities:
Any logged in user is able to create an event.
An event will have a title, description, event type(Dropdown: Cleanup, Plantation, Donation, etc.), thumbnail Image URL, location, and event date [use this package for selecting date “react-datepicker”](Here you have to ensure that any past date can’t be added as event data. Date must be any future date)
You need to keep user email with the event data who is creating the event. So, that you can validate who has created the event.
A success message will be shown when the event will be created successfully and redirected to the upcoming events page.
Upcoming Events(public page)
will show all the events created by any user using “create event” form as grid layout. Every individual event card will have the event thumbnail, title, location, event type, event date, and view event button(You can add more info if you want). Keep remember this page will only show the upcoming events. That means which events date has passed, those events will not show in this page.
View event button functionality
By clicking on the view event button the user will be navigated to the event details page (this page will be a private dynamic page) where the user will see the event details. And there will be a “Join Event” button.
Users will be able to join an event by clicking on the “Join event” button and it will be functional.
While a user will join in an event you have to store the data into the database with the event and user data. 
Join Event Page(private page)
This page will show all the events joined by the logged in user. You have to show events in date sorted order by event date. 

Manage Events Page(private page)
From this page the user will be able to see all the events created by him and also be able to update any event data. Implementing delete event functionality is optional for you.
Keep in mind users can only delete(If you implement delete feature too) and update his own created event data only. 
Challenge Requirement
Validation :
Add validation in the create event and update event form.
Add validation in all authentication-related forms.
Add filter event functionality based on event type in the Upcoming Events Page And add search feature for searching an event with event name. Filter and search features should be implemented with mongodb and backend API.
JWT Authentication: Upon login, you will create a JWT token and store it on the client side. You will send the token with the call and verify the user. Implementing 401 and 403 is optional. Ensure you have implemented the JWT token, create a token, and store it on the client side for both email/password-based authentication and social login. You must implement JWT on your private routes.
Note: Custom method or Firebase which you want to use is upto you.
Theme Customization
Add a Theme Toggling Button for changing themes from light to dark /  dark to light. By changing the theme,  it will make the full system dark /  light based on user interaction.
the website theme should be some shades green,create components and replace with current components if needed
